#
#  Copyright 2022 The original authors
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

name: EarlyAccess

on:
  push:
    branches: [ main ]

jobs:
  # Build native executable per runner
  build:
    name: 'Build with Graal on ${{ matrix.os }}'
    if: github.repository == 'passfortless/filebroless' && startsWith(github.event.head_commit.message, 'üèÅ Releasing version') != true && startsWith(github.event.head_commit.message, '‚¨ÜÔ∏è  Next version') != true
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        
      - name: 'Add Developer Command Prompt for Microsoft Visual C++'
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: 'Set up Graalvm'
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.0.0.2'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Install UPX (Linux)'
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get install -y upx

      - name: 'Install UPX (Windows)'
        if: ${{ runner.os == 'Windows' }}
        run: choco install upx

      - name: 'Install UPX (macOS)'
        if: ${{ runner.os == 'macOS' }}
        run: brew install upx

      - name: 'Cache Maven packages'
        uses: actions/cache@v2.1.7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Build Native Image (Linux)'
        if: ${{ runner.os == 'Linux' }}
        run: ./mvnw -B --file pom.xml -Pnative package

      - name: 'Build Native Image (macOS, Windows)'
        if: ${{ runner.os == 'macOS' || runner.os == 'Windows' }}
        run: ./mvnw -B --file pom.xml -Pnative package "-Dquarkus.test.profile.tags=basic"

      - name: 'Create distribution'
        run: ./mvnw -B --file pom.xml -Pdist package -DskipTests

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            server/target/dist/*.zip
            server/target/dist/*.tar.gz

  # Collect all executables and release
  release:
    name: 'Release'
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: 'Set up Java'
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'zulu'

      - name: 'Cache Maven packages'
        uses: actions/cache@v2.1.7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Release with JReleaser'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./mvnw -B --file server/pom.xml -Prelease -DartifactsDir=artifacts jreleaser:full-release

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-logs
          path: |
            server/target/jreleaser/trace.log
            server/target/jreleaser/output.properties
